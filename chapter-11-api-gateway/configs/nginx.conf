events {}

http {
    # Rate limiting: 5 req/s per IP
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=5r/s;

    # JWT secret (for demo, use mysecret)
    lua_shared_dict jwt_secrets 10m;

    server {
        listen 80;

        # --- Path routing ---
        location /api/v1/ {
            proxy_pass http://service-v1:3001/;
            limit_req zone=api_limit burst=10 nodelay;
        }

        location /api/v2/ {
            proxy_pass http://service-v2:3002/;
        }

        # --- Secure endpoint (JWT check) ---
        location /api/v1/secure {
            access_by_lua_block {
                local jwt = require "resty.jwt"
                local auth_header = ngx.var.http_Authorization
                if not auth_header then
                    ngx.status = 401
                    ngx.say("Missing Authorization header")
                    return ngx.exit(401)
                end

                local _, _, token = string.find(auth_header, "Bearer%s+(.+)")
                local jwt_obj = jwt:verify("mysecret", token)

                if not jwt_obj["verified"] then
                    ngx.status = 403
                    ngx.say("Invalid JWT")
                    return ngx.exit(403)
                end
            }
            proxy_pass http://service-v1:3001/secure;
        }

        # --- Response transformation (add custom header) ---
        proxy_set_header X-Api-Gateway "NGINX";
    }
}
